{"ast":null,"code":"import ApolloClient from \"apollo-client\";\nimport { setContext } from \"apollo-link-context\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { split, ApolloLink } from \"apollo-link\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { onError } from \"apollo-link-error\";\nimport { API_URL, APP_URL } from \"./config\";\nimport { notification } from \"antd\";\nexport const JWT_TOKEN_KEY = \"app_token\";\nconst httpLink = new HttpLink({\n  uri: `${API_URL}/query`\n});\nconst errorLink = onError(({\n  networkError,\n  graphQLErrors\n}) => {\n  if (graphQLErrors) {\n    graphQLErrors.forEach(({\n      message,\n      locations,\n      path\n    }) => {\n      if (message === \"access denied\") {\n        console.log(message);\n        notification.error({\n          message: message\n        });\n        window.location.href = APP_URL + \"/\";\n      } else {\n        notification.error({\n          message: message\n        });\n      }\n    });\n  }\n\n  if (networkError) console.log(`Network error: ${networkError}`);\n});\n\nconst getWebsocketURL = () => {\n  return API_URL.replace(\"https://\", \"wss://\").replace(\"http://\", \"ws://\");\n};\n\nconst getToken = () => {\n  return localStorage.getItem(JWT_TOKEN_KEY);\n}; // Create a WebSocket link:\n\n\nconst wsLink = new WebSocketLink({\n  uri: `${getWebsocketURL()}/query`,\n  options: {\n    reconnect: true,\n    connectionParams: () => {\n      const token = getToken();\n      return {\n        authorization: token ? `Bearer ${token}` : \"\"\n      };\n    }\n  }\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = getToken();\n  return {\n    headers: { ...headers,\n      authorization: token ? `Bearer ${token}` : \"\"\n    }\n  };\n});\nconst link = split( // split based on operation type\n({\n  query\n}) => {\n  const definition = getMainDefinition(query);\n  return definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n}, wsLink, authLink.concat(httpLink));\nexport const apolloClient = new ApolloClient({\n  link: ApolloLink.from([errorLink, link]),\n  cache: new InMemoryCache()\n});","map":{"version":3,"sources":["/Users/toan/Code/ued_danang/web/src/client.js"],"names":["ApolloClient","setContext","InMemoryCache","split","ApolloLink","HttpLink","WebSocketLink","getMainDefinition","onError","API_URL","APP_URL","notification","JWT_TOKEN_KEY","httpLink","uri","errorLink","networkError","graphQLErrors","forEach","message","locations","path","console","log","error","window","location","href","getWebsocketURL","replace","getToken","localStorage","getItem","wsLink","options","reconnect","connectionParams","token","authorization","authLink","_","headers","link","query","definition","kind","operation","concat","apolloClient","from","cache"],"mappings":"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","sourcesContent":["import ApolloClient from \"apollo-client\";\nimport { setContext } from \"apollo-link-context\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { split, ApolloLink } from \"apollo-link\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { onError } from \"apollo-link-error\";\nimport { API_URL, APP_URL } from \"./config\";\nimport { notification } from \"antd\";\n\nexport const JWT_TOKEN_KEY = \"app_token\";\nconst httpLink = new HttpLink({\n  uri: `${API_URL}/query`,\n});\n\nconst errorLink = onError(({ networkError, graphQLErrors }) => {\n  if (graphQLErrors) {\n    graphQLErrors.forEach(({ message, locations, path }) => {\n      if (message === \"access denied\") {\n        console.log(message);\n        notification.error({ message: message });\n        window.location.href = APP_URL + \"/\";\n      } else {\n        notification.error({ message: message });\n      }\n    });\n  }\n  if (networkError) console.log(`Network error: ${networkError}`);\n});\n\nconst getWebsocketURL = () => {\n  return API_URL.replace(\"https://\", \"wss://\").replace(\"http://\", \"ws://\");\n};\n\nconst getToken = () => {\n  return localStorage.getItem(JWT_TOKEN_KEY);\n};\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `${getWebsocketURL()}/query`,\n  options: {\n    reconnect: true,\n    connectionParams: () => {\n      const token = getToken();\n      return {\n        authorization: token ? `Bearer ${token}` : \"\",\n      };\n    },\n  },\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = getToken();\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === \"OperationDefinition\" &&\n      definition.operation === \"subscription\"\n    );\n  },\n  wsLink,\n  authLink.concat(httpLink)\n);\n\nexport const apolloClient = new ApolloClient({\n  link: ApolloLink.from([errorLink, link]),\n  cache: new InMemoryCache(),\n});\n"]},"metadata":{},"sourceType":"module"}