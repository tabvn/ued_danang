type Teacher implements Model{
	id: ID! @tag(gorm: "primaryKey")
	userId: ID! @tag(gorm:"index")
	user: User! @tag(gorm:"foreignKey:UserID")
	firstName: String!
	lastName: String!
	phone: String!
	workPlace: String
	createdAt: Time!
	updatedAt: Time!
}
input TeacherInput{
	email: String!
	password: String!
	firstName: String!
	lastName: String!
	phone: String!
	workPlace: String
}
input UpdateTeacherInput{
	email: String!
	firstName: String!
	lastName: String!
	phone: String!
	password: String
	workPlace: String
}
input TeacherFilter{
	search: String
	limit: Int
	offset: Int
}
type TeacherConnection{
	total: Int64!
	nodes: [Teacher!]
}
extend type Query {
	teachers(filter: TeacherFilter): TeacherConnection!
	teacherCourseStudents(courseId: ID!): [CourseStudent!]
	teacherClassStudents(classId: ID!): [Student!]
}
extend type Mutation {
	createTeacher(input: TeacherInput!): Teacher!
	updateTeacher(id: ID!, input: UpdateTeacherInput!): Teacher!
}
