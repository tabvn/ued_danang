type Course implements Model{
	id: ID! @tag(gorm: "primaryKey")
	code: String!
	required: Boolean!
	limit: Int!
	teacherId: ID!
	teacher: Teacher!
	faculties: [Faculty!] @tag(gorm:"many2many:course_faculty")
	title: String!
	lessonDay: Int!
	lessonFrom: Int!
	lessonTo: Int!
	unit: Int!
	open: Boolean! @tag(gorm:"default:true")
	scoreConfigure: Json
	registerCount: Int! @tag(gorm:"-")
	isRegistered: Boolean! @tag(gorm:"-")
	updatedAt: Time!
	createdAt: Time!
}

input ScoreConfigureItem{
	name: String!
	value: Float!
	status: Boolean!
}
type CourseStudent implements Model{
	id: ID! @tag(gorm:"primaryKey")
	studentId: ID!
	student: Student! @tag(gorm:"foreignKey:StudentID")
	courseId: ID!
	course:Course! @tag(gorm:"foreignKey:CourseID")
	score1: Float
	score2: Float
	score3:Float
	score4:Float
	score: Float
	teacherNote: String
	createdAt: Time!
	updatedAt: Time!
}

input CourseStudentFilter{
	search: String
	limit: Int
	offset: Int
}
input CourseInput{
	code: String!
	required: Boolean!
	teacherId: ID!
	faculties: [ID!]!
	title: String!
	lessonDay: Int!
	lessonFrom: Int!
	lessonTo: Int!
	limit: Int!
	unit: Int!
	open:Boolean!
}
input UpdateCourseInput{
	code: String
	required: Boolean
	teacherId: ID
	faculties: [ID!]
	title: String
	lessonDay: Int
	lessonFrom: Int
	lessonTo: Int
	limit: Int
	unit: Int
	open:Boolean
}
type CourseConnection{
	total: Int64!
	nodes: [Course!]
}
input CourseFilter{
	search: String
	limit: Int
	offset: Int
}
extend type Query {
	courses(filter: CourseFilter): CourseConnection!
	studentOpenCourses(filter: CourseFilter): CourseConnection!
	getCourseStudents(courseId:ID!, filter: CourseStudentFilter!): [CourseStudent!]
	teacherCourses: [Course!]
}
extend type Mutation {
	createCourse(input: CourseInput!): Course!
	updateCourse(id: ID!, input: UpdateCourseInput!): Course!
	registerCourse(courseId: ID!): CourseStudent!
	unregisterCourse(courseId: ID!): Boolean!
	exportCourseStudents(courseId: ID!): String
	updateTeacherNote(courseId: ID!, studentId: ID!, note: String!): Boolean!
	adminUnregisterCourse(courseId: ID!, studentId: ID!):Boolean!
	updateCourseScoreConfigure(courseId: ID!, configure: [ScoreConfigureItem!]!): Boolean!
}